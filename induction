Module One.
Inductive nat : Type  :=
| O : nat
| S : nat -> nat.

Definition pred ( n : nat ) : nat  :=
match n with
| O => O
| S n' => n'
end.

End One.

Fixpoint evenb ( n : nat ) : bool :=
match n with
| O => true
| S ( S n' ) => evenb n'
| S O => false
end.

Theorem evenDouble : forall n : nat,
 evenb n = evenb ( S ( S n )).
Proof.
intros n.
destruct n.
- reflexivity.
-reflexivity.
Qed.

Definition negb ( b : bool ) : bool :=
match b with
| true => false
| false => true
end.

Theorem negb_neg : forall b : bool,
negb (negb b) = b.
Proof.
intros b. destruct b.
- reflexivity.
- reflexivity.
Qed.



Theorem evenb_S : forall n : nat,
  evenb (S n) = negb (evenb n).
Proof.
intros n.
induction n as [| n' IHn'].
- simpl. reflexivity.
- rewrite <- evenDouble. rewrite -> IHn'. 
  rewrite -> negb_neg. reflexivity. Qed.

(**Start from proof within proofs.**)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
intros n m.
simpl. reflexivity.

Theorem mult_0_plus : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity. 
Qed.

Theorem plus_n_Sm : forall n m : nat,
n + S m = S( n +m ).
Proof.
intros n m.
induction n as [| n' IHn'].
 - simpl. reflexivity.
 - simpl. rewrite -> IHn'. reflexivity.
Qed.

Theorem plus_comm : forall n m : nat,
n +m = m + n.
Proof.
intros n m.
induction n as [| n' IHn'].
- simpl. rewrite <- plus_n_O. reflexivity.
- simpl. rewrite -> IHn'. rewrite -> plus_n_Sm. reflexivity.
Qed.

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
intros n m p q.
destruct n.
- simpl. rewrite <- plus_n_O. reflexivity.
- assert (plus_commA: S n + m = m + S n).
  { induction n as [| n' IHn'].
    {  rewrite <- plus_comm. reflexivity. }
    { - rewrite -> plus_comm. reflexivity.  }
 }
 rewrite -> plus_commA. reflexivity.
Qed.

Theorem plus_rearrange_2ndtry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
intros n m p q.
assert (plus_commA: n + m = m + n).
  { induction n as [| n' IHn'].
    {  rewrite <- plus_comm. reflexivity. }
    { - rewrite -> plus_comm. reflexivity.  }
 }
 rewrite -> plus_commA. reflexivity.
Qed.

Theorem plus_assoc : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof. intros n m p.
induction n as [| n' IHn'].
- simpl. reflexivity.
- simpl. rewrite -> IHn'. reflexivity.
Qed.





























