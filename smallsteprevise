Set Warnings "-notation-overridden,-parsing".
Require Import Coq.Arith.Arith.
Require Import Coq.Arith.EqNat.
Require Import Coq.omega.Omega.
Require Import Coq.Lists.List.
Import ListNotations.
Require Import maps.
Require Import imp.
Require Import rel.

Inductive tm : Type :=
  | C : nat -> tm 
  | P : tm -> tm -> tm. 

Fixpoint evalF (t:tm) : nat :=
 match t with 
 | C n => n
 | P n1 n2 => evalF n1 + evalF n2
end.

Reserved Notation " t '==>' n " (at level 50, left associativity).

Inductive eval : tm -> nat -> Prop :=
 | E_Const : forall n,
       C n ==> n
 | E_Plus  : forall t1 t2 n1 n2,
       t1 ==> n1 ->
       t2 ==> n2 -> 
       P t1 t2 ==> (n1+n2)
where " t '==>' n " := (eval t n).

Module SimpleArith1.

Reserved Notation " t '-->' t' " (at level 40).

Inductive step : tm -> tm -> Prop :=
  | ST_PlusConstConst : forall n1 n2,
       P (C n1) (C n2) --> C(n1+n2)
  | ST_Plus1 : forall t1 t2 t1',
       t1 --> t1' ->
       P t1 t2 --> P t1' t2
  | ST_Plus2 : forall n1 t2 t2',
       t2 --> t2' ->
       P (C n1) t2 --> P (C n1) t2'
where " t '-->' t' " := (step t t').

End SimpleArith1.

Definition deterministic {X : Type} (R : relation X) :=
  forall x y1 y2 : X, R x y1 -> R x y2 -> y1 = y2.
Module SimpleArith2.
Import SimpleArith1.

Theorem step_deterministic:
  deterministic step.
Proof.
 unfold deterministic.
 intros x y1 y2 Hy1 Hy2. 
 generalize dependent y2.
induction Hy1; intros y2 Hy2.  
inversion Hy2. 
   reflexivity. inversion H2.
   inversion H2.
- inversion Hy2. 
rewrite <- H0 in Hy1.
inversion Hy1. 
rewrite (IHHy1 t1'0).
reflexivity.
apply H2.
rewrite <- H in Hy1.
inversion Hy1. 
- inversion Hy2.
rewrite <- H1 in Hy1.
inversion Hy1.
inversion H2.
rewrite (IHHy1 t2'0). 
reflexivity.
apply H2.
Qed.

End SimpleArith2.

Inductive value : tm -> Prop :=
 | v_const  : forall n, value (C n). 

Reserved Notation " t '-->' t' " (at level 40).
Inductive step : tm -> tm -> Prop :=
  | ST_PlusConstConst : forall n1 n2,
          P (C n1) (C n2)
      --> C (n1 + n2)
  | ST_Plus1 : forall t1 t1' t2,
        t1 --> t1' ->
        P t1 t2 --> P t1' t2
  | ST_Plus2 : forall v1 t2 t2',
        value v1 -> (* <--- n.b. *)
        t2 --> t2' ->
        P v1 t2 --> P v1 t2'

  where " t '-->' t' " := (step t t').

Theorem step_deterministic :
  deterministic step.
Proof.
unfold deterministic.
intros x y1 y2 Hy1 Hy2.
generalize dependent y2.
induction Hy1; intros y2 Hy2.
- inversion Hy2.
  + reflexivity.
  + inversion H2.
  + inversion H3.
- inversion Hy2.
  + rewrite <- H0 in Hy1.
    inversion Hy1. 
  + rewrite (IHHy1 t1'0).
    reflexivity.
    apply H2.
  + inversion H1.
    rewrite <- H4 in Hy1.
    inversion Hy1.
- inversion Hy2. 
  + rewrite <- H2 in Hy1.
    inversion Hy1.
  + inversion H.
 rewrite <- H4 in H3. inversion H3.
  + rewrite (IHHy1 t2'0).
    reflexivity.
    apply H4.
Qed.

Theorem strong_progress : forall t,
  value t \/ (exists t', t --> t').
Proof.
induction t. 
- left. apply v_const.
- right.
  destruct IHt1 as [IHt1 |[t1' Ht1]].
  destruct IHt2 as [IHt2 |[t2' Ht2]].
  inversion IHt1. 
  inversion IHt2.
  exists (C(n +n0)).
  apply ST_PlusConstConst.
  exists (P t1 t2').
  apply ST_Plus2.
  apply IHt1.
  apply Ht2.
  exists (P t1' t2).
  apply ST_Plus1.
  apply Ht1.
Qed.

Definition normal_form {X : Type} 
(R : relation X) (t : X) : Prop :=
  ~ exists t' ,R t t'.

Lemma value_is_nf : forall v,
  value v -> normal_form step v.
Proof.
intros.
unfold normal_form.
inversion H.
intros c.
inversion c.
inversion H1.
Qed.

Lemma nf_is_value : forall t,
  normal_form step t -> value t.
Proof.
unfold normal_form.  intros t H. 
  assert (G : value t \/ 
exists t', t --> t').
  { apply strong_progress. }
  destruct G as [G | G].
  - (* l *) apply G.
  - (* r *) exfalso. 
apply H. assumption.
Qed.

Corollary nf_same_as_value : forall t,
  normal_form step t <-> value t.
Proof.
  split. apply nf_is_value. apply value_is_nf.
Qed.

Module Temp1.
Inductive value : tm -> Prop :=
  | v_const : forall n, value (C n)
  | v_funny : forall t1 n2,
                value (P t1 (C n2)).

Reserved Notation " t '-->' t' " (at level 40).
Inductive step : tm -> tm -> Prop :=
  | ST_PlusConstConst : forall n1 n2,
      P (C n1) (C n2) --> C (n1 + n2)
  | ST_Plus1 : forall t1 t1' t2,
      t1 --> t1' ->
      P t1 t2 --> P t1' t2
  | ST_Plus2 : forall v1 t2 t2',
      value v1 ->
      t2 --> t2' ->
      P v1 t2 --> P v1 t2'

  where " t '-->' t' " := (step t t').
Lemma value_not_same_as_normal_form :
  exists v, value v /\ ~ normal_form step v.
Proof.
unfold normal_form.
exists (P (P (C 2) (C 2)) (C 2)).
split.
apply v_funny.
unfold not.
intros.
apply H.
exists (P (C (2+2)) (C 2)).
apply ST_Plus1.
apply ST_PlusConstConst.
Qed.
End Temp1.

Module Temp2.
Inductive value : tm -> Prop :=
  | v_const : forall n, value (C n).

Reserved Notation " t '-->' t' " (at level 40).
Inductive step : tm -> tm -> Prop :=
  | ST_Funny : forall n,
      C n --> P (C n) (C 0) (* <--- NEW *)
  | ST_PlusConstConst : forall n1 n2,
      P (C n1) (C n2) --> C (n1 + n2)
  | ST_Plus1 : forall t1 t1' t2,
      t1 --> t1' ->
      P t1 t2 --> P t1' t2
  | ST_Plus2 : forall v1 t2 t2',
      value v1 ->
      t2 --> t2' ->
      P v1 t2 --> P v1 t2'

  where " t '-->' t' " := (step t t').

Lemma value_not_same_as_normal_form :
  exists v, value v /\ 
~normal_form step v.
Proof.
unfold normal_form.
exists (C 1).
split.
apply v_const.
unfold not.
intros.
apply H.
exists (P (C 1) (C 0)).
apply ST_Funny.
Qed.

End Temp2.

Module Temp3.
Inductive value : tm -> Prop :=
  | v_const : forall n, value (C n).
Reserved Notation " t '-->' t' " (at level 40).
Inductive step : tm -> tm -> Prop :=
  | ST_PlusConstConst : forall n1 n2,
      P (C n1) (C n2) --> C (n1 + n2)
  | ST_Plus1 : forall t1 t1' t2,
      t1 --> t1' ->
      P t1 t2 --> P t1' t2

  where " t '-->' t' " := (step t t').

Lemma value_not_same_as_normal_form :
  exists t, ~value t /\ normal_form step t.
Proof.
unfold normal_form.
exists (P (C 1) (P (C 1) (C 1))).
split.
unfold not.
intros.
inversion H.
unfold not.
intros.
inversion H.
inversion H0.
inversion H4.
Qed.
End Temp3.

Module Temp4.
Inductive tm : Type :=
  | tru : tm
  | fls : tm
  | test : tm -> tm -> tm -> tm.
Inductive value : tm -> Prop :=
  | v_tru : value tru
  | v_fls : value fls.

Reserved Notation 
" t '-->' t' " (at level 40).

Inductive step : tm -> tm -> Prop :=
  | ST_IfTrue : forall t1 t2,
      test tru t1 t2 --> t1
  | ST_IfFalse : forall t1 t2,
      test fls t1 t2 --> t2
  | ST_If : forall t1 t1' t2 t3,
      t1 --> t1' ->
      test t1 t2 t3 --> test t1' t2 t3

where " t '-->' t' " := (step t t').

Example bool_step_prop3 :
     test
       (test tru tru tru)
       (test tru tru tru)
       fls
   -->
     test
       tru
       (test tru tru tru)
       fls.
Proof.
apply ST_If.
apply ST_IfTrue.
Qed.

Definition manual_grade_for_smallstep_bools : 
option (nat*string) := None.

Theorem strong_progress : forall t,
  value t \/ (exists t', t --> t').
Proof.
induction t.
- left. apply v_tru.
- left ; apply v_fls.
- right.
inversion IHt1.  (**)
 * inversion H. (* IHt1 value*)
  + exists t2. apply ST_IfTrue. (*IHT1 tru*)
  + exists t3. apply ST_IfFalse. (*IHT1 fls*)
 *  inversion H.
    exists (test x t2 t3).
    apply ST_If.
    apply H0. (*IHt1 not value \/ part *) 
Qed.

Theorem step_deterministic :
  deterministic step.
Proof.
unfold deterministic.
intros x y1 y2 H1 H2.
generalize dependent y2.
induction H1; intros y2 Hy2. 
inversion Hy2.
reflexivity.
inversion H3.
inversion Hy2.
reflexivity.
inversion H3.
inversion Hy2.
- rewrite <- H0 in H1.
inversion H1.
- rewrite <- H0 in H1.
inversion H1.
- rewrite (IHstep t1'0).
reflexivity.
apply H4.
Qed.

Module Temp5.

Inductive step : tm -> tm -> Prop :=
  | ST_IfTrue : forall t1 t2,
      test tru t1 t2 --> t1
  | ST_IfFalse : forall t1 t2,
      test fls t1 t2 --> t2
  | ST_If : forall t1 t1' t2 t3,
      t1 --> t1' ->
      test t1 t2 t3 --> test t1' t2 t3
  | ST_Same : forall t1 t2,
      test t1 t2 t2 --> t2

  where " t '-->' t' " := (step t t').

Definition bool_step_prop4 :=
         test
            (test tru tru tru)
            fls
            fls
     -->
         fls.

Example bool_step_prop4_holds :
  bool_step_prop4.
Proof.
unfold bool_step_prop4.
apply ST_Same.
Qed.

End Temp5.
End Temp4.

Inductive multi {X:Type} (R: relation X) : relation X :=
  | multi_refl : forall (x : X), multi R x x
  | multi_step : forall (x y z : X),
                    R x y ->
                    multi R y z ->
                    multi R x z.

Notation " t '==>*' t' " := 
(multi step t t') (at level 40).

Theorem multi_R : forall (X:Type) (R:relation X) (x y : X),
       R x y -> (multi R) x y.
Proof.
intros.
apply multi_step with y.
apply H. 
apply multi_refl.
Qed.

Theorem multi_trans :
  forall (X : Type) (R : relation X) (x y z : X),
      multi R x y ->
      multi R y z ->
      multi R x z.
Proof.
intros.
induction H.
apply H0.
apply multi_step with y.
apply H.
apply IHmulti.
apply H0.
Qed.

Lemma test_multistep_1:
      P
        (P (C 0) (C 3))
        (P (C 2) (C 4))
   ==>*
      C ((0 + 3) + (2 + 4)).
Proof.  
apply multi_step with
            (P (C (0 + 3))
               (P (C 2) (C 4))).
apply ST_Plus1. 
apply ST_PlusConstConst.
apply multi_step with 
(P (C (0 + 3)) (C (2 + 4))).
apply ST_Plus2.
apply v_const.
apply ST_PlusConstConst.
apply multi_R.
apply ST_PlusConstConst.
Qed.

Lemma test_multistep_2:
  C 3 ==>* C 3.
Proof.
apply multi_refl.
Qed.

Lemma test_multistep_3:
      P (C 0) (C 3)
   ==>*
      P (C 0) (C 3).
Proof.
apply multi_refl.
Qed.

Lemma test_multistep_4:
      P
        (C 0)
        (P
          (C 2)
          (P (C 0) (C 3)))
  ==>*
      P
        (C 0)
        (C (2 + (0 + 3))).
Proof.
Admitted.

Definition step_normal_form := normal_form step.
Definition normal_form_of (t t' : tm) :=
  (t ==>* t' /\ step_normal_form t').

Theorem normal_forms_unique:
  deterministic normal_form_of.
Proof.
unfold deterministic.
unfold normal_form_of.
intros x y1 y2 H1 H2.
inversion H1 as [P11 P12]; clear H1.
inversion H2 as [P21 P22]; clear H2.
generalize dependent y2.
Admitted.

Definition normalizing {X : Type} 
(R : relation X) :=
  forall t, exists t',
    (multi R) t t' /\ normal_form R t'.

Lemma P_step : forall x y t,
  x --> y -> P x t --> P y t.
Proof.
intros.
inversion H.
- apply ST_Plus1.
apply ST_PlusConstConst.
- apply ST_Plus1. 
apply ST_Plus1.
apply H0.
- apply ST_Plus1.
apply ST_Plus2. apply H0.
apply H1.
Qed.

Lemma multistep_congr_1 : forall t1 t1' t2,
     t1 ==>* t1' ->
     P t1 t2 ==>* P t1' t2.
Proof.
intros.
induction H.
- apply multi_refl. 
- assert (G: P x t2 ==>* P y t2).
  { apply multi_R. apply P_step. 
apply H. }
apply multi_trans with (P y t2).
apply G.
apply IHmulti.
Qed.

Lemma multistep_congr_1' : forall t1 t1' t2,
     t1 ==>* t1' ->
     P t1 t2 ==>* P t1' t2.
Proof.
  intros t1 t1' t2 H. induction H.
  - (* multi_refl *) apply multi_refl.
  - (* multi_step *) apply multi_step 
with (P y t2).
    + apply ST_Plus1. apply H.
    + apply IHmulti.
Qed.

Lemma multistep_congr_2 : forall t1 t2 t2',
     value t1 ->
     t2 ==>* t2' ->
     P t1 t2 ==>* P t1 t2'.
Proof.
intros.
induction H0.
- apply multi_refl.
- apply multi_step with (P t1 y).
apply ST_Plus2.
apply H. apply H0.
apply IHmulti.
Qed.

Theorem step_normalizing :
  normalizing step.
Proof.
unfold normalizing.
induction t.
- exists (C n).
split. apply multi_refl.
apply value_is_nf.
apply v_const.
- destruct IHt1 as 
[t1' [Hsteps1 Hnormal1]].
destruct IHt2 as 
[t2' [Hsteps2 Hnormal2]].
rewrite nf_same_as_value in Hnormal1.
rewrite nf_same_as_value in Hnormal2.
inversion Hnormal1 as [n1 H1].
inversion Hnormal2 as [n2 H2].
rewrite <- H1 in Hsteps1.
rewrite <- H2 in Hsteps2.
exists (C(n1+n2)).
split.
apply multi_trans with (P (C n1) t2 ).
apply multistep_congr_1.
apply Hsteps1.
apply multi_trans with 
(P (C n1) (C n2) ).
apply multistep_congr_2.
rewrite H1.
apply Hnormal1.
apply Hsteps2.
apply multi_R.
apply ST_PlusConstConst.
rewrite nf_same_as_value.
apply v_const.
Qed.

Theorem eval__multistep : forall t n,
  t ==> n -> t ==>* C n.
Proof.
intros.
induction H.
- apply multi_refl.
- apply multi_trans 
with (P (C n1) t2).
apply multistep_congr_1.
apply IHeval1.
apply multi_trans 
with (P (C n1) (C n2)).
apply multistep_congr_2.
apply v_const.
apply IHeval2.
apply multi_R.
apply ST_PlusConstConst.
Qed.

Definition manual_grade_for_eval__multistep_inf : 
option (nat*string) := None.

Lemma step__eval : forall t t' n,
     t --> t' ->
     t' ==> n ->
     t ==> n.
(*t ==> n -> t ==>* C n.*)
Proof.
  intros t t' n Hs.
 generalize dependent n.
  induction Hs.
 - intros. 
Admitted.

Theorem multistep__eval : forall t t',
  normal_form_of t t' -> exists n, 
t' = C n /\ t ==> n.
Proof.
intros t t'.
unfold normal_form_of.
intros.
destruct H as [I SN].
unfold step_normal_form in SN.
rewrite nf_same_as_value in SN.
inversion SN. exists n.
split.
reflexivity.
induction I.
- rewrite <- H .
apply E_Const.
- apply step__eval with y.
apply H0.
apply IHI.
apply SN.
apply H.
Qed.

Theorem evalF_eval : forall t n,
  evalF t = n <-> t ==> n.
Proof.
intros.
split.
- intros.
Admitted.

(* continued in smallstep2.v *)



































  
   



  




 

















